Day1:
What is RTL Design?
RTL Design is the Beharvioral Representation of required specification
image
Introduction to iverilog,Design and Test Bench
RTL design is the implementation of Spec
What is Simulator?
1.Simulator is a tool used to simulate the design
2.RTL design(implementation of spec) is checked for the adherence to the spec by simulating the design
-iverilog:It is the simulator which is used to simulate the design
-Design:Design is the actual verilog code or set of verilog codes which has the intended functionality to meet with the required specifications.
we use the test bench to check whether the design is obeying with required spec or not by applying stimulus(various inputs) and need to check we are getting desired output or not.
-Test Bench(TB):Test Bench is the setup to apply stimulus(test_vectors) to the design to check its functionality(to give various inputs and check whether it is obeying the spec or not).
How Simulator works?
1.Simulator looks for the change in input signals
2.If there is no change in input value there is no change in output value.
  1.Simulator is looking for change in values of input
Design and Testbench setup:
testbench1_SS
1.Here we have our design with one or more than primary inputs and primary outputs
2.So we are generating the stimulus to the primary inputs by stimulus generator and
3.To observe the stimulus at primary output we are using stimulus observer to check whether we are getting desired output for desired input
![image](https://user-images.githubusercontent.com/90343497/163569916-908a52e0-6608-4b80-ac67-bc9ed5cea4a6.png)
The above image depicts the testbench
Design will be instantiated in the test bench
Iverilog based Simulation flow:
The design and the Test Bench(TB) are applied to simulator(iverilog) as we know that simulator always looks for change in input value so that there will be change in output value,
The Simulator(iverilog) generates the change in output in VCD(Value Change Dump) format and to view the VCD file GTKwave is used to check the output in waveform.
lab_checking in desktop
-To simulate the design as we know that design and testbench are need to applied to simulator and this can be done by using below command:
1.iverilog design_file(verilog) test_bench    ex: iverilog good_mux.v tb_good_mux.v
2.A file ./a.out file is generated in the path
3.To see the vcd file of desired design we need to give ./a.out as a command
4.To generate the waveform of vcd file the command we used is gtkwave tb_good_mux.vcd
gtkwave_lab1checking Screenshot
To check the Verilog file and the testbench file:
1.gvim file.v -o tb_file.v
verilog checking image
What is Synthesis?
1.RTL to Gate level transition is called synthesis.
2.The Design is converted into gates and connections are made between gates
3.So after applying design and .lib to synthesizer a netlist file will be generated.
image of synthesis
The above image depicts synthesis of design and .lib file will result a netlist file.
What is Synthesizer?
1.The tool which is used for converting the RTL to Netlist.
2.Yosys is the synthesizer is used in the workshop.
Flow of Yosys synthesizer:
yosys_flow image
The above image depicts when we apply design and .lib to yosys(synthesizer) it will give the netlist
from the above image there are two observations made:
1.Netlist is nothing but the representation of design in the form of standard cells that are present in the .lib
2.The commands used are:
  1.read_verilog is used to read the design
  2.read_liberty is used to read the .lib
  3.write_verilog is used to get the netlist file  
How to verify the synthesis?
verify_synthesis image
The above figure shows we need to apply netlist and testbench to iverilog(simulator) then we will get the vcd file and by giving gtkwave command the waveform will depicts
from the above figure there are two observations made:
1.The resultant waveform from the simulator after synthesis and waveform from simulator before synthesis should be same to get the correct synthesis
2.The set of primary inputs and outputs will remain same between RTL design and synthesisized netlist as same testbench is being used.
What is .lib?
1.It is the collection of logical modules.
2.It include basic gates like And gate, Or gate...etc..
  1.Different flavors of same gate
    a.2 input AND gate,3 input AND gate,4 input AND gate
    b.slower,medium,faster of the gate  
Why differnet flavors of gate?
Combinational delay in logic path determines the maximum speed of operation of digital logic circuit.
image of flipflop
As per the above image the propagation delay of combinational circuit should be as minimum for the maximum speed of operation of digital logic circuit,so faster cells to be used to reduce the the propagation delay of combinational circuit
slower cells
constrains
netlist
lab4:
After cloning the git,type yosys to check yosys got invoked in the path
lab3_verilog_1
To read the liberty file use the command read_liberty -lib ./my_lib/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
To read the design use the command read_verilog good_mux.v
lab3_verilog_2
To synthesis the module use the command synth -top good_mux
To convert the RTL to netlist use the abc command  abc -liberty ../my_lib/lib/sky130_fd_sc_hd__tt_025C_1v80.lib 
lab3_verilog_3
lab3_verilog_4
To view the graphical representation of netlist type show
lab3_verilog_5
lab3_verilog_6
To write the netlist use the command write_verilog -noattr good_mux_netlist.v
To view the netlist use !gvim good_mux_netlist.v
lab3_verilog_7
lab3_verilog_8
Day2:
lab4_verilog_1,2,3,4

